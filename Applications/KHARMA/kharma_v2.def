Bootstrap: docker
From: nvidia/cuda:12.2.0-devel-ubuntu22.04

%labels
    Maintainer Plamen G. Krastev, FASRC
    Version kharma-openmpi-hdf5

%environment
    export PATH=/opt/openmpi/bin:/opt/hdf5/bin:/opt/kharma:$PATH
    export LD_LIBRARY_PATH=/opt/openmpi/lib:/opt/hdf5/lib:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
    export OMPI_ALLOW_RUN_AS_ROOT=1
    export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1

%post
    echo ">>> Installing base packages"
    apt-get update && apt-get install -y \
        build-essential cmake git wget curl nano \
        libfftw3-dev libpnetcdf-dev \
        libnuma-dev pciutils m4 autoconf automake libtool \
        python3 python3-pip \
        && apt-get clean

    echo ">>> Building UCX from source"
    cd /tmp
    rm -rf ucx
    apt-get install -y librdmacm-dev libibverbs-dev numactl libnuma-dev
    git clone https://github.com/openucx/ucx.git
    cd ucx
    git checkout v1.16.0
    ./autogen.sh
    ./configure --prefix=/opt/ucx \
        --with-cuda=/usr/local/cuda \
        --with-rdmacm --with-verbs \
        --enable-mt
    make -j$(nproc) && make install

    export UCX_PATH=/opt/ucx
    export PATH=${UCX_PATH}/bin:$PATH
    export LD_LIBRARY_PATH=${UCX_PATH}/lib:$LD_LIBRARY_PATH

    echo ">>> Building OpenMPI 5.0.5 with CUDA and UCX"
    cd /tmp
    rm -rf openmpi-5.0.5 openmpi-5.0.5.tar.gz
    apt-get update && apt-get install -y build-essential libnuma-dev
    wget https://download.open-mpi.org/release/open-mpi/v5.0/openmpi-5.0.5.tar.gz
    tar -xzf openmpi-5.0.5.tar.gz
    cd openmpi-5.0.5
    ./configure --prefix=/opt/openmpi \
                --with-cuda=/usr/local/cuda \
                --with-ucx=/opt/ucx
    make -j$(nproc) && make install

    export PATH=/opt/openmpi/bin:$PATH
    export LD_LIBRARY_PATH=/opt/openmpi/lib:$LD_LIBRARY_PATH

    echo ">>> Building parallel HDF5 1.14.6 with OpenMPI"
    cd /tmp
    rm -rf hdf5-1.14.6 hdf5-1.14.6.tar.gz
    wget https://support.hdfgroup.org/releases/hdf5/v1_14/v1_14_6/downloads/hdf5-1.14.6.tar.gz
    tar -xzf hdf5-1.14.6.tar.gz
    cd hdf5-1.14.6
    ./configure --prefix=/opt/hdf5 --enable-parallel --enable-shared \
                CC=/opt/openmpi/bin/mpicc
    make -j$(nproc) && make install

    export PATH=/opt/hdf5/bin:$PATH
    export LD_LIBRARY_PATH=/opt/hdf5/lib:$LD_LIBRARY_PATH

    echo ">>> Cloning KHARMA"
    cd /opt
    git clone https://github.com/AFD-Illinois/kharma.git
    cd kharma
    git submodule update --init --recursive

    echo ">>> Updating machine files"
    mv machines/cannon_ramesh.sh /tmp/cannon_ramesh.sh

    cat << 'EOF' > machines/cannon.sh
# Harvard Cannon

if [[ $HOST == *"rc.fas.harvard.edu" ]]; then
    echo CANNON
    HOST_ARCH=HSW
    NPROC=16
    DEVICE_ARCH=AMPERE80  # For A100 nodes (change if needed)
    EXTRA_FLAGS="-DPARTHENON_DISABLE_HDF5_COMPRESSION=ON -DKokkos_ARCH_AMPERE80=ON"

    if [[ "$ARGS" == *"cuda"* ]]; then
        #module load gcc/12.2.0-fasrc01 
        #module load openmpi/5.0.5-fasrc02
        #module load hdf5/1.14.6-fasrc01
        #module load cmake/3.31.6-fasrc01
        C_NATIVE=gcc
        CXX_NATIVE=g++ 
    fi
fi
EOF

    echo ">>> Building KHARMA with make.sh"
    ./make.sh clean cuda

%runscript
    exec /bin/bash "$@"

%test
    echo "KHARMA with OpenMPI, HDF5, CUDA is ready!"

